#!/bin/bash

# prompt character
#
# returns a '#' if the user is logged in
# as root, a '$' otherwise
cpnt_promptchar() {
  [ $(id -u) = 0 ] \
    && printf "${promptchar[prefix]}${promptchar[root_icon]}${promptchar[suffix]}" \
    || printf "${promptchar[prefix]}${promptchar[user_icon]}${promptchar[suffix]}"
}

# current background job count
#
# returns the amount of currently running
# background jobs
cpnt_jobcount() {
  printf "${jobcount[prefix]}$(jobs -p | wc -l)${jobcount[suffix]}"
}

# username
#
# returns the username of the current user
# of the shell session
cpnt_username() {
  printf "${username[prefix]}${USER}${username[suffix]}"
}

# hostname
#
# returns the hostname of the current shell session
cpnt_hostname() {
  printf "${hostname[prefix]}${HOSTNAME}${hostname[suffix]}"
}

# system uptime
#
# returns a formatted string representing
# the amount of time the system has been active
cpnt_uptime() {
  printf "${uptime[prefix]}$(uptime -p | cut -d " " -f2-)${uptime[suffix]}"
}

# date
#
# returns a formatted string representing
# the current date in the US form 'MM/DD/YYYY'
cpnt_date() {
  printf "${date[prefix]}$(date +${date[format]})${date[suffix]}"
}

# time
#
# returns a formatted string representing
# the current time in military (24 hour) format
# with am / pm appended depending on the time
cpnt_time() {
  printf "${time[prefix]}$(date +${time[format]})${time[prefix]}"
}

# exit code of last command ran
#
# returns the exit code of the last 
# command that was run
cpnt_exitstatus() {
  [ "${exit_status[show_code]}" = "true" ] \
    && local exit=${?}

  [ "${?}" = "0" ] \
    && printf "${exit_status[prefix]}${exit_status[pass_icon]}${exit}${exit_status[suffix]}" \
    || printf "${exit_status[prefix]}${exit_status[fail_icon]}${exit}${exit_status[suffix]}"
}

# current working directory
#
# returns the full path of the current working directory
cpnt_cwd() {
  if [ "${cwd[abbreviate_repo]}" = "true" ]; then
    source /usr/lib/promptly/component.d/git
    __init_git_info
  fi

  if [ "${inside_gitdir}" = "true" ]; then
    printf "${cwd[prefix]}${toplevel}/${gitdir}${cwd[suffix]}"
  elif [ "${inside_worktree}"  = "true" ]; then
    printf "${cwd[prefix]}${toplevel}${prefix}${cwd[suffix]}"
  elif [ "${cwd[abbreviate_home]}" = "true" ]; then
    printf "${cwd[prefix]}${PWD/#$HOME/\~}${cwd[suffix]}"
  else
    printf "${cwd[prefix]}${PWD}${cwd[suffix]}"
  fi
}
