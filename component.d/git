#!/bin/bash

# git upstream information
#
# returns the comparison of the currently checked-out branch to the
# upstream branch. 'none' is there is no upstream branch, 'up-to-date' 
# if they are equal, 'ahead' if you have unpublished commits,
# 'behind' if upstream has commits you need to pull and 'diverged'
# if both upstream and local have commits
#
# note that a 'git fetch' will be needed to give accurate results
cpnt_git_upstream() {
  __init_git_info || return

  count="$(git rev-list --count --left-right @{upstream}...HEAD 2>/dev/null)"
  case "${count}" in
        "") u="${git_upstream[no_upstream_icon]}" ;;
  "0	0") u="${git_upstream[equal_icon]}"       ;;
  "0	"*) u="${git_upstream[ahead_icon]}"       ;;
  *"	0") u="${git_upstream[behind_icon]}"      ;;
	 *) u="${git_upstream[diverged_icon]}"    ;;
  esac
    
  printf "${git_uptream[prefix]}${u}${git_upstream[suffix]}"
}

# git branch name
#
# returns the name of the current checked-out branch in the
# current git repository. if HEAD is in a detached state it
# returns the abbreviated commit hash prefixed with a colon (:)
cpnt_git_branch() {
  __init_git_info || return

  printf "${git_branch[prefix]}${branch}${git_branch[suffix]}"
}

# git upstream information including commit count
#
# returns the same as cmpnt_git_upstream but includes the number
# of commits you are ahead or behind by
#
# note that a 'git fetch' will be needed to give accurate results
cpnt_git_upstreamcount() {
    __init_git_info || return

    count="$(git rev-list --count --left-right @{upstream}...HEAD 2>/dev/null)"
    case "${count}" in
                "") u="none"                ;;
	"0	0") u="up-to-date"          ;;
	"0	"*) u="ahead ${count#0	}"  ;;
	*"	0") u="behind ${count%	0}" ;;
		 *) u="diverged"            ;;
    esac
    echo "${u}"
}

# git branch state
#
# returns the state of the git branch. ie. whether the branch
# is rebasing, merging, cherry-picking, reverting or bisecting
cpnt_git_state() {
  __init_git_info || return

  if   [ -d "${gitdir}/rebase-merge" ] || [ -d "${gitdir}/rebase-apply" ]; then
    state="${git_state[rebase_icon]}"
  elif [ -f "${gitdir}/MERGE_HEAD" ]; then
    state="${git_state[merge_icon]}"
  elif [ -f "${gitdir}/CHERRY_PICK_HEAD" ]; then
    state="${git_state[cherry_pick_icon]}"
  elif [ -f "$g/REVERT_HEAD" ]; then
    state="${git_state[revert_icon]}"
  elif [ -f "$g/BISECT_LOG" ]; then
    state="${git_state[bisect_icon]}"
  fi

  printf "${git_state[prefix]}${state}${git_state[suffix]}"
}

# git repository commit count
#
# returns the number of commits made on the current repository
# formatted as a string
cpnt_git_commit_count() {
  __init_git_info || return

  printf "${git_commit_count[prefix]}$(git log --pretty=oneline | wc -l)${git_commit_count[suffix]}" 
}

# git working tree status
#
# returns the status of the working tree of the currently
# checked-out branch. this information is the equivalent 
# of doing 'git status --short' where each character
# returned means a different status type
#
# the meanings of the characters are:
#    U - conflict
#    M - modified
#    D - deleted
#    ? - untracked / new
#    A - added via 'git add'
#    C - copied
#    R - renamed
#    L - clean
cpnt_git_status() {
  __init_git_info || return

  git status --porcelain | (
    while read line; do
      case "${line//[[:space:]]/}" in
      'UU'*) u="${git_status[conflict_icon]}"  ;;
      'M'*)  m="${git_status[modified_icon]}"  ;;
      'D'*)  d="${git_status[deleted_icon]}"   ;;
      '??'*) t="${git_status[untracked_icon]}" ;;
      'A'*)  a="${git_status[added_icon]}"     ;;
      'C'*)  c="${git_status[copied_icon]}"    ;;
      'R'*)  r="${git_status[renamed_icon]}"   ;;
      esac
    done

    b="${u}${m}${d}${t}${a}${c}${r}"
    [ -n "${b}" ] \
      && printf "${git_status[prefix]}${b}${git_status[suffix]}" \
      || printf "${git_status[prefix]}${git_status[clean_icon]}${git_status[suffix]}" 
  )
}

# git repo top-level
#
# returns the name of the git repository currently in
# your working directory. if you are inside a directory
# in your repository it will return the repository name
# plus the further directories you are in. if you are
# not currently in a git repository it will return your
# current working directory with '$HOME' abbreviated
# to a tilde '~' ie exactly the same as returned by
# 'shortpwd'
#
# eg:
#    /some/path/to/git_repo             -> git_repo
#    /some/path/to/git_repo/other/path  -> git_repo/other/path
#    /some/path/                        -> /some/path
#    /home/user/                        -> ~
#    /home/user/some/path/              -> ~/some/path
cpnt_git_toplevel() {
    __init_git_info

    if [ "${inside_gitdir}" = "true" ]; then
        p="${toplevel}/${gitdir}"
    elif [ "${inside_worktree}"  = "true" ]; then
        p="${toplevel}${prefix}"
    else
        p="${PWD/#$HOME/\~}"
    fi

    echo "${p}"
}

__init_git_info() {
  repo_info="$(git rev-parse --show-prefix --abbrev-ref HEAD \
    --show-toplevel --absolute-git-dir --is-inside-git-dir   \
    --is-bare-repository --is-inside-work-tree               \
    --show-superproject-working-tree 2>/dev/null)"

  [[ "${?}" != "0" ]] && return 1

  parent_repo="${repo_info##*$'\n'}"
  if [[ "true" != "${parent_repo}" ]] && [[ "false" != "${parent_repo}" ]] && [[ "" != "${parent_repo}" ]]; then
    parent_repo="${parent_repo##*/} \u2016 "; repo_info="${repo_info%$'\n'*}"; else unset parent_repo; fi

  inside_worktree="${repo_info##*$'\n'}"
  repo_info="${repo_info%$'\n'*}"
  bare_repo="${repo_info##*$'\n'}"
  repo_info="${repo_info%$'\n'*}"
  inside_gitdir="${repo_info##*$'\n'}"
  repo_info="${repo_info%$'\n'*}"
  gitdir_path="${repo_info##*$'\n'}"
  gitdir="/${gitdir_path##*/}"
  gitdir_prefix="${PWD#$gitdir_path}"
  repo_info="${repo_info%$'\n'*}"
    
  [[ "true" = "${inside_gitdir}" ]] \
    && toplevel="${parent_repo}$(basename $(git ls-remote --get-url) .git)" \
    || toplevel="${parent_repo}$(basename ${repo_info##*$'\n'})"; repo_info="${repo_info%$'\n'*}"

  [[ "${repo_info##*$'\n'}" = "HEAD" ]] \
    && branch=":$(git rev-parse --short HEAD)" \
    || branch="${repo_info##*$'\n'}"; repo_info="${repo_info%$'\n'*}"

  [[ "${repo_info%$'\n'*}" != "" ]] \
    && prefix="/${repo_info##*$'\n'}"; prefix="${prefix::-1}"
}

__init_git_info_old() {
    git_info="$(git rev-parse --show-prefix --git-dir --is-inside-git-dir \
      --is-bare-repository --is-inside-work-tree --show-toplevel 2>/dev/null)"

    exitc="${?}"
    toplevel="${git_info##*$'\n'}"

    if [ "${toplevel_exit}" != "0" ]; then
        return 1
    elif [[ "${toplevel}" != "" ]]; then
        toplevel="$(basename ${toplevel})"
    else
        toplevel="$(basename $(git ls-remote --get-url) .git)"
    fi    

    git_info="${git_info%$'\n'*}"
    inside_worktree="${git_info##*$'\n'}"
    git_info="${git_info%$'\n'*}"
    bare_repo="${git_info##*$'\n'}"
    git_info="${git_info%$'\n'*}"
    inside_gitdir="${git_info##*$'\n'}"
    git_info="${git_info%$'\n'*}"
    gitdir="${git_info%$'\n'*}"

    if [[ "${git_info%$'\n'*}" != "" ]]; then
        prefix="/${git_info%/$'\n'*}"
    fi

    return 0
}
