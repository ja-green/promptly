#!/bin/bash

# git upstream information
#
# returns the comparison of the currently checked-out branch to the
# upstream branch. 'none' is there is no upstream branch, 'up-to-date' 
# if they are equal, 'ahead' if you have unpublished commits,
# 'behind' if upstream has commits you need to pull and 'diverged'
# if both upstream and local have commits
#
# note that a 'git fetch' will be needed to give accurate results
cpnt_git_upstream() {
    __init_git_info || return

    count="$(git rev-list --count --left-right @{upstream}...HEAD 2>/dev/null)"
    case "${count}" in
        "") 		u="none"
	"0	0") 	u="up-to-date"
	"0	"*) 	u="ahead"
	*"	0") 	u="behind"
		 *)	u="diverged"
    esac
    echo "${u}"
}

# git upstream information including commit count
#
# returns the same as cmpnt_git_upstream but includes the number
# of commits you are ahead or behind by
#
# note that a 'git fetch' will be needed to give accurate results
cpnt_git_upstreamcount() {
    __init_git_info || return

    count="$(git rev-list --count --left-right @{upstream}...HEAD 2>/dev/null)"
    case "${count}" in
        "") 		u="none"
	"0	0") 	u="up-to-date"
	"0	"*) 	u="ahead ${count#0	}"
	*"	0") 	u="behind ${count%	0}"
		 *)	u="diverged"
    esac
    echo "${u}"
}

# git branch state
#
# returns the state of the git branch. ie. whether the branch
# is rebasing, merging, cherry-picking, reverting or bisecting
cpnt_git_state() {
    __init_git_info || return

    if   [ -d "${gitdir}/rebase-merge" ] || [ -d "${gitdir}/rebase-apply" ]; then
        s="rebasing"
    elif [ -f "${gitdir}/MERGE_HEAD" ]; then
	s="merging"
    elif [ -f "${gitdir}/CHERRY_PICK_HEAD" ]; then
	s="cherry-picking"
    elif [ -f "$g/REVERT_HEAD" ]; then
	s="reverting"
    elif [ -f "$g/BISECT_LOG" ]; then
	s="bisecting"
    fi

    echo "${s}"
}

# git working tree status
#
# returns the status of the working tree of the currently
# checked-out branch. this information is the equivalent 
# of doing 'git status --short' where each character
# returned means a different status type
#
# the meanings of the characters are:
#    M - modified
#    D - deleted
#    ? - untracked / new
#    A - added via 'git add'
#    C - copied
#    R - renamed
#    L - clean
cpnt_git_status() {
    __init_git_info || return

    git status --porcelain | (
      while read line; do
          case "${line//[[:space:]]/}" in
            @('M'|'UU')*)  m="M" ; ;;
            'D'*)          d="D" ; ;;
            '??'*)         u="?" ; ;;
            'A'*)          a="A" ; ;;
            'C'*)          c="C" ; ;;
            'R'*)          r="R" ; ;;
          esac
      done

      b="${m}${d}${u}${a}${c}${r}"
      [ -n "${b}" ] && echo ${b}" || echo "L" 
  )
}

# git repo top-level
#
# returns the name of the git repository currently in
# your working directory. if you are inside a directory
# in your repository it will return the repository name
# plus the further directories you are in. if you are
# not currently in a git repository it will return your
# current working directory with '$HOME' abbreviated
# to a tilde '~' ie exactly the same as returned by
# 'cpnt_system_shortpwd'
#
# eg:
#    /some/path/to/git_repo             -> git_repo
#    /some/path/to/git_repo/other/path  -> git_repo/other/path
#    /some/path/                        -> /some/path
#    /home/user/                        -> ~
#    /home/user/some/path/              -> ~/some/path
cpnt_git_toplevel() {
    __init_git_info

    if [ "${inside_gitdir}" = "true" ]; then
        p="${toplevel}/${gitdir}"
    elif [ "${inside_worktree}"  = "true" ]; then
        p="${toplevel}${prefix}"
    else
        p="${PWD/#$HOME/\~}"
    fi

    echo "${p}"
}

__init_git_info() {
    git_info="$(git rev-parse --show-prefix --git-dir --is-inside-git-dir \
      --is-bare-repository --is-inside-work-tree --show-toplevel 2>/dev/null)"

    exitc="${?}"
    toplevel="${git_info##*$'\n'}"

    if [ "${toplevel_exit}" != "0" ]; then
        return 1
    elif [[ "${toplevel}" != "" ]]; then
        toplevel="$(basename ${toplevel})"
    else
        toplevel="$(basename $(git ls-remote --get-url) .git)"
    fi    

    git_info="${git_info%$'\n'*}"
    inside_worktree="${git_info##*$'\n'}"
    git_info="${git_info%$'\n'*}"
    bare_repo="${git_info##*$'\n'}"
    git_info="${git_info%$'\n'*}"
    inside_gitdir="${git_info##*$'\n'}"
    git_info="${git_info%$'\n'*}"
    gitdir="${git_info%$'\n'*}"

    if [[ "${git_info%$'\n'*}" != "" ]]; then
        prefix="/${git_info%/$'\n'*}"
    fi

    return 0
}

